回调脚本：
	大部分功能是以原生语言编写的，只有小部分的设计可定制。

	实现上可能是 钩子函数，或者回调。

	百度钩子函数：
	https://baike.baidu.com/item/%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/8722531

              回调函数
	-------|----|-----|-------------
	|				|
	|       引擎循环		|
	|				|
	--------------------------------


事件处理器脚本：
	游戏对象回应游戏世界中的特殊事件。 例如对 爆炸的回应。

	这个时候，游戏对象还是原生语言写的，而其中一些固定的事件作为了钩子函数。

	又脚本来写这些钩子函数的回应。



以脚本扩展游戏对象类型或定义新类型：
	原生语言中也会有一个基础对象 ，同时也会在脚本那边提供一个基础对象。

	构建了脚本基础对象，也就是同时构建了原生语言基础对象。不过实际上是先构建原生语言的基础对象，接着在构建脚本语言的基础对象。

	例如 bigworld 或kbe， 他们在 bigworld模块或kbe 模块提供 createEntity 来创建 基础对象。

	原生语言基础对象将重要的一些事件的钩子都触发到脚本语言这边。（如 bigworld的entity 的 onTimer, onEnterWorld, onLeaveWorld 等等）

	脚本层通过继承与脚本层的基础对象，来重写这些事件的实现，实现自己的逻辑。


	另外，为了进行网络通信，也允许自定义事件。（如 bigworld中的 def文件中定义的那些方法）



脚本驱动的引擎系统：
	引擎都是由脚本写的，只有部分重要的库才是原生语言来写，例如物理库，渲染库，声音库 等等。